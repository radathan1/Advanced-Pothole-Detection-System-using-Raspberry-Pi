from picamera.array import PiRGBArray
from picamera import PiCamera
from PIL import Image
import time
import cv2
import numpy as np
import imutils 
import dropbox
from dropbox.exceptions import ApiError, AuthError
import datetime
import picamera
import sys, os
def up():
	TOKEN = 'uesRJaR72TAAAAAAAAABMgJnUOo0AQfb9cTd9kGT_UYx2ZGKxGQh7YhpLy_SlUmu'
	PHOTOFORMAT = 'jpeg'
	
	
	def camCapture(filename):
		with picamera.PiCamera() as camera:
			camera.resolution = (640, 480)
			print("Photo: %s"%filename + "." + PHOTOFORMAT)
			time.sleep(2)
			camera.capture(filename + '.' + PHOTOFORMAT, format=PHOTOFORMAT)
			print("Photo captured and saved ...")
			return filename + '.' + PHOTOFORMAT
			
	def timestamp():
		tstring = datetime.datetime.now()
		print("Filename generated ...")
		return tstring.strftime("%Y%m%d_%H%M%S")
		
	def uploadFile(localfile):
		 if (len(TOKEN) == 0):
			 sys.exit("ERROR: Missing access token.")
			 
		 print("Creating a Dropbox object...")
		 dbx = dropbox.Dropbox(TOKEN)
		 
		 try:
			 dbx.users_get_current_account()
		 except AuthError as err:
				 sys.exit("ERROR: Invalid access token")
		 uploadPath = '/' + localfile	
			 
		 with open(localfile, 'rb') as f: 
				  print("Uploading " + localfile + " to Dropbox as " + uploadPath + "...")
				  
				  try:
					   dbx.files_upload(f.read(), uploadPath)
				  except ApiError as err:
				        if (err.error.is_path() and err.error.get_path().error.is_insufficient_space()):
						sys.exit("ERROR: Cannot upload; insufficient space.")
						
				        elif err.user_message_text:	 
					    print(err.user_message_text)
					    sys.exit()
							   
				        else:
					    print(err)
					    sys.exit()
        def deleteLocal(file):
		os.system("rm " + file)
		print("File: " + file + " deleted ...")
		
	def solve():		
		
		filename = timestamp()
		file = camCapture(filename)
		uploadFile(file)
		deleteLocal(file)
		print("Done")
		main()
	if __name__ == '__main__':	
		solve()					
def main():
	
	# initialize the camera and grab a reference to the raw camera capture
	camera = PiCamera()
        camera.resolution = (640, 480)
	camera.framerate = 32
        rawCapture = PiRGBArray(camera, size=(640, 480))
        # allow the camera to warmup
        time.sleep(0.1)
        #capture frames from the camera
  
        for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
		# grab the raw NumPy array representing the image, then initialize the timestamp
	        # and occupied/unoccupied text
		image = frame.array
		# show the frame
	        height=frame.array.shape[0]
                mask = np.zeros((frame.array.shape[0], frame.array.shape[1]), dtype="uint8")
                pts = np.array([[300,300],[100,300] ,[50,height], [400,height]], dtype=np.int32)
                cv2.fillConvexPoly(mask, pts, 255)
		masked = cv2.bitwise_and(image,image, mask=mask)
                cv2.imshow("Region of interest",masked)
                cv2.imshow("Frame", image)
                gray = cv2.cvtColor(masked,cv2.COLOR_BGR2GRAY)
		blur =cv2.GaussianBlur(gray,(5,5),0)
                ret2, otsu = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                canny=cv2.Canny(otsu,127,250)
                cv2.imshow("canny",canny)
		kernel = np.ones((5, 5), np.uint8)
                dilation = cv2.dilate(canny, kernel, iterations=10)
          

                contours,hirarchy = cv2.findContours(dilation,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)

                contours = sorted(contours,key=cv2.contourArea,reverse=False)
                print(len(contours))
                for c in contours:   
			img = cv2.drawContours(image, contours, -1, (0, 255, 0), 3)             
			cv2.imshow("contours",image)
		        if len(contours)>2:
				camera.close()
				up()
	
        
         
	        key = cv2.waitKey(1) & 0xFF
	        # clear the stream in preparation for the next frame
	        rawCapture.truncate(0)
	        # if the `q` key was pressed, break from the loop
	        if key == ord("q"):
		    break
		     
main()	
	     
          